import ByteArray from "@enocean-js/byte-array";

export interface Eep {
    number:         string;
    title:          string;
    status?:        Empty | StatusEnum;
    case?:          Case[];
    originalIndex?: number;
    eep:            string;
    rorg_title:     RorgTitle;
    rorg_number:    RorgNumber;
    func_title:     string;
    func_number:    number | string;
    description:    string;
    submitter:      string[];
    ref?:           string;
    $t?:            string;
    icon?:          string;
}

export interface Case {
    datafield:    DatafieldElement[] | DatafieldElement;
    direction?:   string;
    condition?:   Condition;
    title?:       string;
    description?: Empty | string;
    status?:      StatusEnum;
    statusfield?: StatusField[];
}

export interface Condition {
    direction?:   string;
    datafield?:   Field[] | Field;
    statusfield?: StatusField[];
}

export interface Field {
    bitoffs: number | string;
    bitsize: number | string;
    value:   number | string;
}

export interface StatusField extends Field {
    data:   Data;
}

export enum Data {
    Nu = "NU",
    T21 = "T21",
}


export interface DatafieldElement {
    reserved?:    Empty | string;
    data?:        Empty | string;
    shortcut?:    Empty | string;
    description?: Empty | string;
    bitoffs?:     number | string;
    bitsize?:     number | string;
    scale?:       Scale | string;
    enum?:        EnumElement[] | EnumElement;
    info?:        Empty | string;
    range?:       Scale;
    unit?:        UnitClass | string;
    spread?:      Spread[];
}

export interface Empty {
}

export interface EnumElement {
    item: ItemElement[] | ItemElement;
}

export interface ItemElement {
    value?:       number | string;
    description?: string;
    min?:         string;
    max?:         string;
    scale?:       Scale | string;
    unit?:        string;
    range?:       Scale;
    info?:        Empty;
    bitmask?:     string;
}


export interface Scale {
    min?: number | string;
    max?: number | string;
    ref?: string;
}

export interface Spread {
    bitoffs: number | string;
    bitsize: number | string;
}

export interface UnitClass {
    ref?: string;
}

export enum StatusEnum {
    Released = "released",
}

export enum RorgNumber {
    A5 = "0xA5",
    D2 = "0xD2",
    D5 = "0xD5",
    F6 = "0xF6",
    f6 = "0xf6",
}

export enum RorgTitle {
    RPSTelegram = "RPS Telegram",
    The1BSTelegram = "1BS Telegram",
    The4BSTelegram = "4BS Telegram",
    VLDTelegram = "VLD Telegram",
}

export const EEP : Record<string, Eep>;

export function getEEP(eep:string): Eep | undefined;
export function decodeAll(radio: RadioErp1, eep:string, direction: Direction): {eep: Eep, eepCase: Case, data: any};

export function encodeData(data: any, options: {eep:string, direction?: "1"|"2", payload?: ByteArray, status?: number}) : {payload:ByteArray, status: number};
export function encodeData(data: any, options: {eepCase:Case, payload?: ByteArray}) : {payload:ByteArray, status: number};