import {ByteArray, ByteArrayConstructor} from "@enocean-js/byte-array";
import {ESP3Packet} from "@enocean-js/esp3-packet";

declare type Bit = 0|1;

export const UTE_BIDIRECTIONAL = 0x01
export const UTE_UNIDIRECTIONAL = 0x00
export const UTE_TEACH_IN_SUCCESSFULL = 0x01
export const UTE_DELETION_SUCCESSFULL = 0x10
export const UTE_EEP_NOT_SUPPORTED = 0x11
export const UTE_TEACH_IN_NOT_ACCEPTED = 0x00
export const UTE_QUERY_TEACH_IN_REQUEST = 0x00
export const UTE_QUERY_DELETION_REQUEST = 0x01
export const UTE_QUERY_TEACH_IN_OR_DELETION = 0x10
export const UTE_QUERY_NOT_USED = 0x11
export const UTE_CMD_QUERY = 0x00
export const UTE_CMD_RESPONSE = 0x01

declare module '@enocean-js/radio-erp1' {

    export type Direction = "1" | "2"
    export type Bit = Bit;

    export class RadioERP1 extends ESP3Packet {
        get packetType ():1;

        get RORG ():number;

        set RORG (value) ;

        get payload (): ByteArray;

        set payload (data);

        get senderId ():string;

        set senderId (id);

        set status (val:number);

        get status (): number;

        get T21 ():Bit

        set T21 (val)
        get NU () :Bit

        set NU (val);

        get subTelNum ():number;

        set subTelNum (v);

        get destinationId ():string;

        set destinationId (id);

        get RSSI () :number;

        set RSSI (v);

        get securityLevel ():number;

        set securityLevel (v);

        get teachIn ():boolean

        set teachIn (val)

        decode (eep: string, direction: Direction):any;

        encode (data: any, options: any):ByteArray;

        get teachInInfo (): any;

        static makeTeachIn (opt): RadioERP1;

        static from (input: ESP3Packet| ByteArrayConstructor): RadioERP1;
    }
}
